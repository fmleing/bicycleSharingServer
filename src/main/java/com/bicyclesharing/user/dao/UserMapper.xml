<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bicyclesharing.user.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.bicyclesharing.user.entity.User" >
    <id column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="user_account" property="userAccount" jdbcType="DECIMAL" />
    <result column="user_credit" property="userCredit" jdbcType="INTEGER" />
    <result column="user_cash" property="userCash" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, user_name, user_account, user_credit, user_cash
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bicyclesharing.user.entity.User" >
    insert into user (user_id, user_name, user_account, 
      user_credit, user_cash)
    values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{userAccount,jdbcType=DECIMAL}, 
      #{userCredit,jdbcType=INTEGER}, #{userCash,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.bicyclesharing.user.entity.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="userAccount != null" >
        user_account,
      </if>
      <if test="userCredit != null" >
        user_credit,
      </if>
      <if test="userCash != null" >
        user_cash,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userAccount != null" >
        #{userAccount,jdbcType=DECIMAL},
      </if>
      <if test="userCredit != null" >
        #{userCredit,jdbcType=INTEGER},
      </if>
      <if test="userCash != null" >
        #{userCash,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bicyclesharing.user.entity.User" >
    update user
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userAccount != null" >
        user_account = #{userAccount,jdbcType=DECIMAL},
      </if>
      <if test="userCredit != null" >
        user_credit = #{userCredit,jdbcType=INTEGER},
      </if>
      <if test="userCash != null" >
        user_cash = #{userCash,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bicyclesharing.user.entity.User" >
    update user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_account = #{userAccount,jdbcType=DECIMAL},
      user_credit = #{userCredit,jdbcType=INTEGER},
      user_cash = #{userCash,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>

  <!--1.插入一个用户-->
  <insert id="insertUser" parameterType="com.bicyclesharing.user.entity.User">
    INSERT INTO user (user_id, user_name, user_account, user_credit, user_cash)
    VALUES (#{userId}, #{userName}, #{userAccount}, #{userCredit}, #{userCash})
  </insert>
  <!--2.按照id删除一个用户-->
  <delete id="deleteUser" parameterType="Integer">
    DELETE FROM user
    WHERE user_id = #{userId}
  </delete>
  <!--3.修改一个用户-->
  <update id="updateUser" parameterType="com.bicyclesharing.user.entity.User">
    UPDATE user
    SET user_name   = #{userName}, user_account = #{userAccount},
    user_credit = #{userCredit}, user_cash = #{userCash}
    WHERE user_id = #{userId}
  </update>
  <!--4.查询用户名含有某个字段的用户-->
  <select id="selectUserByUserNameLike" parameterType="String" resultMap="BaseResultMap">
    SELECT *
    FROM user
    WHERE user_name LIKE '%${_parameter}%'
  </select>
  <!--5.根据名字查询用户-->
  <select id="selectUserByName" parameterType="String" resultMap="BaseResultMap">
    SELECT *
    FROM user
    WHERE user_name = #{userName}
  </select>
  <!--6.查询所有用户-->
  <select id="selectAllUser" resultMap="BaseResultMap">
    SELECT *
    FROM user
  </select>
  <!--7.根据id查询用户-->
  <select id="selectUserById" resultMap="BaseResultMap" parameterType="Integer">
    SELECT *
    FROM user
    WHERE user_id = #{userId}
  </select>
  <!--8.计算用户数量-->
  <select id="selectUserCount" resultType="Integer">
    SELECT count(user_id)
    FROM user
  </select>
  <!--9.根据信用度(低于userCredit)查询用户-->
  <select id="selectUserByCredit" resultMap="BaseResultMap" parameterType="Integer">
    SELECT *
    FROM user
    WHERE user_credit <![CDATA[ <=]]> #{userCredit}
  </select>
  <!--10.根据押金额查询用户-->
  <select id="selectUserByCash" parameterType="Integer" resultType="Integer">
    SELECT *
    FROM user
    WHERE user_cash = #{userCash}
  </select>
</mapper>